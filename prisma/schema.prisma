// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Post {
  id         String     @id @default(uuid())
  createdAT  DateTime   @default(now())
  title      String
  slug       String     @unique
  content    String     @db.Text
  image      String?
  view       Int        @default(0)
  nbComments Int        @default(0)
  // user
  userEmail  String
  user       User       @relation(fields: [userEmail], references: [email])
  // category
  catSlug    String
  cat        Category   @relation(fields: [catSlug], references: [slug])
  Comments   Comments[]
}

model Category {
  id    String  @id @default(uuid())
  slug  String  @unique
  title String
  image String?
  posts Post[]
}

model User {
  id            String     @id @default(cuid())
  name          String?
  username      String?    @unique
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  Session       Session[]
  Account       Account?
  posts         Post[]
  comments      Comments[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Comments {
  id        String   @id @default(cuid())
  createdAT DateTime @default(now())
  content   String
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])

  postSlug String
  post     Post   @relation(fields: [postSlug], references: [slug])
}
